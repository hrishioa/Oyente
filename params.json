{
  "name": "Oyente",
  "tagline": "Smart Contract analysis tool",
  "body": "# Oyente\r\n\r\n**Note: The tool is currently under development, please report any bugs you may find.**\r\n\r\n## Quick Start\r\n\r\nA container with the dependencies set up and the blockchain snapshot installed can be found [here](https://hub.docker.com/r/hrishioa/oyente/).\r\n\r\nTo open the container, install docker and run:\r\n\r\n```docker pull hrishioa/oyente && docker run -i -t hrishioa/oyente```\r\n\r\nTo evaluate the greeter contract Inside the container, run:\r\n\r\n```cd /home/oyente/oyente && source ../dependencies/venv/bin/activate && python oyente.py greeter.sol```\r\n\r\nand you are done!\r\n\r\n## Dependencies\r\n\r\n1. solc and disasm from [go-ethereum](https://github.com/ethereum/go-ethereum)\r\n2. [z3](https://github.com/Z3Prover/z3/releases) Theorem Prover\r\n\r\n## Evaluating Ethereum Contracts\r\n\r\n```python oyente.py <contract filename>```\r\n\r\nAnd that's it! Run ```python oyente.py --help``` for a list of options.\r\n\r\n## Paper\r\n\r\nThe accompanying paper explaining the bugs detected by the tool can be found [here](http://www.comp.nus.edu.sg/~loiluu/papers/oyente.pdf).\r\n\r\n## Miscellaneous Utilities\r\n\r\nA collection of the utilities that were developed for the paper are in `Misc_Utils`. Use them at your own risk - they have mostly been disposable.\r\n\r\n1. `generate-graphs.py` - Contains a number of functions to get statistics from contracts.\r\n2. `get_source.py` - The *get_contract_code* function can be used to retrieve contract source from [EtherScan](https://etherscan.io)\r\n3. `transaction_scrape.py` - Contains functions to retrieve up-to-date transaction information for a particular contract.\r\n\r\n## Benchmarks\r\n\r\nNote: This is an improved version of the tool used for the paper. Benchmarks are not for direct comparison.\r\n\r\nTo run the benchmarks, it is best to use the docker container as it includes the blockchain snapshot necessary.\r\nIn the container, run `batch_run.py` after activating the virtualenv. Results are in `results.json` once the benchmark completes.\r\n\r\nThe benchmarks take a long time and a *lot* of RAM in any but the largest of clusters, beware.\r\n\r\n#### Known Issues\r\nIf you encounter the `unhashable instance` error, please add the following to your `class AstRef(Z3PPObject):` in `/usr/lib/python2.7/dist-packages/z3.py`:\r\n```\r\ndef __hash__(self):\r\n        return self.hash()\r\n```\r\nThe latest version of Z3 does support this, but some previous version does not.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}